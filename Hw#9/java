
// Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.


public class Main {

 
  static class TreeNode {

     int val;

     TreeNode left;

     TreeNode right;

     TreeNode() {}

     TreeNode(int val) { this.val = val; }

     TreeNode(int val, TreeNode left, TreeNode right) {

         this.val = val;

         this.left = left;

         this.right = right;

     }

  }


  public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
  
  {
  if (root == null) {
      return null;
  }
    if (root.val == p.val || root.val == q.val) {
      return root;
  }

    TreeNode left = lowestCommonAncestor(root.left, p,q);  
    TreeNode right = lowestCommonAncestor(root.right, p,q);

    if (root.left == null) 

      return right;

    if (root.right == null)

    return left;

      
      return root;  
    
    
  }


public static void main(String[] args)
  {

    TreeNode root  = new TreeNode(4); 
    
    root.left = new TreeNode(3);
    root.right = new TreeNode(8);
    root.left.left = new TreeNode(1);
    root.right.left = new TreeNode(5);
    root.right.right = new TreeNode(9);



   
    TreeNode p = new TreeNode(3);
    TreeNode q = new TreeNode(8);
    TreeNode lca = lowestCommonAncestor(root, p, q);
    System.out.println("Lowest Common Ancestor: " + lca.val);

    
  
  }
}
