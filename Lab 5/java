// Lab 5 Given the root of a binary tree, determine if it is a valid binary search tree (BST).

public class Main {

  public static class TreeNode {

     int val;

     TreeNode left;

     TreeNode right;

     TreeNode() {}

     TreeNode(int val) { this.val = val; }

     TreeNode(int val, TreeNode left, TreeNode right) {

         this.val = val;

         this.left = left;

         this.right = right;

     }

  }

  public boolean isValidBST(TreeNode root) {
    return isValidBST(root, null, null);
  }

  public boolean isValidBST(TreeNode node, Integer lower, Integer upper) {
    if(node == null) {
      return true;
    }

    if ((upper != null && upper <= node.val) || (lower != null &&  lower >= node.val)) {
      return false;
    }

    return isValidBST(node.left, lower, node.val) && isValidBST(node.right, node.val, upper);
  }

  public static void main(String[] args) {
    Main main = new Main();

    TreeNode root = new TreeNode(4);
    root.left = new TreeNode(3);
    root.left.left = new TreeNode(1);

    root.right = new TreeNode(8);
    root.right.right = new TreeNode(9);
    root.right.left = new TreeNode(5);


    TreeNode root2 = new TreeNode(1);
    root2.left = new TreeNode(2);
    root2.left.left = new TreeNode(3);
    root2.left.right = new TreeNode(4);

    root2.right = new TreeNode(8);
    root2.right.right = new TreeNode(6);
    root2.right.left = new TreeNode(5);

    if(main.isValidBST(root)){
        System.out.println("This is a valid binary");
    }
    else{
        System.out.println("This is an invalid binary");
    }

    if(main.isValidBST(root2)){
        System.out.println("This is a valid binary");
    }
    else{
        System.out.println("This is an invalid binary");
    }
  }
}
